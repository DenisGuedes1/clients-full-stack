para gerar as migrações.
npm run typeorm migration:generate ./src/migrations/InitialMigration -- -d ./src/data-source.ts

para rodar as migrações 
npm run typeorm migration:run -- -d ./src/data-source

reverter migração.
npm run typeorm migration:revert -- -d ./src/data-source


import { IUserPayload } from "../interfaces/user.interface";
import { AppDataSource } from "../data-source";
import { User } from "../entities/user.entity";

const createUserService = async (payload: IUserPayload): Promise<User> => {
  const userRepo = AppDataSource.getRepository(User);
  const user = userRepo.create(payload);

  await userRepo.save(user);

  return user;
};
const listUsersService = async (): Promise<User[]> => {
  const userRepo = AppDataSource.getRepository(User);
  return await userRepo.find();
};
const retrieveUserService = async (userId: string): Promise<User> => {
  const userRepo = AppDataSource.getRepository(User);
  return await userRepo.findOneBy({ id: parseInt(userId) });
};

export { createUserService, listUsersService, retrieveUserService };

////////////////// querybuilder////////////////////////////////
import { Repository } from "typeorm";
import { Users } from "../../entities/entities/Users"; // Importe corretamente a entidade Users
import { AppDataSource } from "../../data-source";
import { AppError } from "../../errors/error";

const getInfoUserService = async (userId: number): Promise<Users | undefined> => {
  const userRepository: Repository<Users> = AppDataSource.getRepository(Users);

  const user = await userRepository
    .createQueryBuilder("user")
    .where("user.id = :id", { id: userId })
    .leftJoinAndSelect("user.contacts", "contacts")
    .getOne();

  if (!user) {
    throw new AppError("User not found", 404);
  }

  return user;
};
